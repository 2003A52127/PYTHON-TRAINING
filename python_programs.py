# -*- coding: utf-8 -*-
"""python programs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vw9PBf4N4HC5bmP6QF6xMom9Bq-Cxwbj

## **14-12-2022**

PAtterns 
1.Basic Patterns
2.Mirror patterns
3.Symmetric Patterns
4.Choice of Patterns
5.Anti-Patterns
"""

rows=int(input("Enter of rows"))
for i in range(rows):
  for j in range(i+1):
    print(j+1,end=" ")
  print("")

size = 5
for i in range(size):
  for j in range(i):
    print(" ", end=" ")
  for j in range(size, i, -1):
    print('*', end=" ")
  p1=print("")
for i in range(size,0,-1):
  for j in range(i):
    print("*",end=" ")
  p2=print(" ")

for i in range(size,0,-1):
  for j in range(i):
    print("*",end=" ")
  print(" ")

#Diamond or Rhombus pattern
n = 5

# upward pyramid
for i in range(n):
    for j in range(n - i - 1):
        print(' ', end='')
    for j in range(2 * i + 1):
        print('*', end='')
    print()

# downward pyramid
for i in range(n - 1):
    for j in range(i + 1):
        print(' ', end='')
    for j in range(2*(n - i - 1) - 1):
        print('*', end='')
    print()

rows=int(input("Enter the number of rows")
i=1
while i<=rows:
  j=rows
  while j>i:
    print('i',end='')
    j-=1
  print('*',end='')
  k=1
  while(k<2)* i-1:
    print('',end=' ')
    k+=1
    if(i==1):
      print()
      else:
        print('*')
      i+=1
    i=rows-1
    while i>=1:
      j=rows
      while(j>i):
        print(' ',end=' ')

#Infosys intermediate level  10M question 
string=str(input("Enter the String:"))
for i in range(len(string)):
  for j in range(i+1):
    print(string[j],end=" ")
  print("")

word="INDIA"
x=" "
for i in word:
  x+=i
  print(x)

a=65
r=7
for i in range(0,r):
  for j in range(0,i+1):
    ch=chr(a)
    print(ch,end=' ')
    a+=1
  print(" ")

rows=int(input("Enter of rows"))
for i in range(rows):
  for j in range(1,i+1):
    print(i*j,end=" ")
  print("")

rows=int(input("Enter of rows"))
for i in range(rows):
  for j in range(i+1):
    print(j+1,end=" ")
  print("")

"""### **//functions**"""

def diff(a,b):
  return a-b
x=20
y=10
print(diff(x,y))

def diff(a,b):
     result=a-b
     print("difference of a&b is",result)
a=20
b=10
diff(a,b)

for i in range(2,15):
  if(i%2!=0):
   print(" ")

#Read user input
min = int(input("Enter the min : "))
max = int(input("Enter the max : "))

for n in range(min,max + 1):
   if n > 1:
       for i in range(2,n):
           if (n % i) == 0:
               break
       else:
           print(n)

def small(a,b)
  if(a<b):
    return a
    else:
      return b
add=lambda x,y:x+y
diff=lamda x,y:x-y
print("smaller of two no,",small(add(-3,-2),diff(=1,2))

def shifth(a,b):
    a,b=b,a
    print("after swap")
    print("a",a)
    print("b",b)
a=int(input("a="))
b=int(input("b="))
print("before swap")
print("a=",a)
print("b",b)
shifth(a,b)

def fibb(n):
  if(n<2):
    return 1
  return(fibb(n-1)+fibb(n-2))
n=int(input("enter the range"))
for i in range(n):
 print("Fibonacci(",i,")=",fibb(i))

x=str(input("Enter the string with char"))
y=str(input("enter the string for match"))
print("wild characters:",x)
print("without wild characters:",y)
print(solve(x,y))

a=int(input())
b=int(input())
count=0
for i in range(a+1,b):
        if(i%2==0):
          count+=1
print(count)

"""## OBJECT ORIENTED PROGRAMMING"""

class abc:
  var=22
  def display(self):
   print("This is class method")
obj=abc()
print(obj.var)
obj.display()

#program to illustrate the constructor
class abc: 
  	def __init__(self, val):
    print("in class methods")
       self.val=val
       print("The value is:",val)
obj=abc(10)

class Number:
  even=0
  num=5
  def check(self,num):
    if(num%2==0):
     self,even=1
    def even_odd(self,num):
     self.check(num)
     if self.even==1:
        print(num,"is even")
     else:
        print(num,"is odd")
n=int(input("Enter number"))
obj=Number()
obj.even_odd(n)

class Number:
  evens=[]
  odds=[]
  def __init__(self,num):
    self.num=num
    if(num%2==0):
      Number.evens.append(num)
    else:
      Number.odds.append(num)
n1=Number(21)
n2=Number(132)
n3=Number(13)
n4=Number(2)
n5=Number(52)
n6=Number(41)
print("the even numbers are:",Number.evens)
print(Number.odds)

#delete method
#general syntax_del
class abc():
  class_var =0
  def __init__(self,var):
     abc.class_var=+=1
     self.var=var
     print("The obj value is ",var)
     print("the class value",abc.class)
  def __del__(self):
    abc.class_var-=1
    print("object with value %d is going out of   ")

class numbers:
   def __init__(self,mylist):
     self.mylist=mylist
   def __getitem__(self,index):
       return self.mylist(index)
   def __setitem__(self,index,val):
        self.mylist[index]=val
numlist=numbers([1,2,3,4,5,6,7,8,9])
print(numlist[3])
print(numlist.mylist)
numlist[3]=10
print(numlist.mylist)
print(numlist[3])

1)__repr__          ...................syntax report of the object
2)__cmp__           .....................compares two class objects
3)__len__             ..................len(object)
4)__call__it acts like a func to call its instances
5)__lt__,__le__,__eq__,__ne,__gt__,__ge__
6)__iter__ iteration over an object
7)__getitem__ used for indexing

#is for illustrating use of a private method
class abc():
 def __init__(self,var):
   self.var=var
 def __display(self):
    print("var is",self._var)
 def add_2(self):
  self.var+=2
  self.display()
obj=abc(10)
obj.add_2()

class fruit:
    def taste(self):
        raise NotImplementedError()# abs lacks required derived class by raising an exception
    def rich(self):
        raise NotImplementedError()
    def color(self):
        raise NotImplementedError()
class mango(fruit):
    def taste(self):
        return "sweet"
    def rich(self):
        return "vitamin a"
    def color(self):
        return "yellow"
class orange(fruit):
    def taste(self):
        return "sweet"
    def rich(self):
        return "vitamin c"
    def color(self):
        return "orange"

Alphanso=mango()
print("Mango")
print("Taste:",Alphanso.taste(),"\nRich in:",Alphanso.rich(),"\nColour:",Alphanso.color())
Orange=orange()
print("\nOrange")
print("Taste:",Orange.taste(),"\nRich in:",Orange.rich(),"\nColour:",Orange.color())

class check():
    def _init_(self):
        self.real=0
        self.img=0
    def setValue(self,real,img):
        self.real=real
        self.img=img
    def _add_(self,c):
        temp = check()
        temp.real=self.real+c.real
        temp.img=self.img+c.img
        return temp
    def display(self):
        print(f"{self.real}+{self.img}i")
c1=check()
c1.setValue(1,2)
c2=check()
c2.setValue(3,4)
c3=c1+c2
print("result is:",end=" ")
c3.display()

#encapsulation public members
class pub:
  def __init__(self,name,num):
    self.name=name
    self.num=num
  def Num(self):
    print("roll num is",self.num)
obj=pub("harry",229)
obj.Num()

# program to overload the _call_ method
class multi:
    def _init_(self,num):
        self.num=num
    def _call_(self,O):
        return self.num*O
x=multi(10)
print(x(5))
print(x(5))

#to visualize ineritance flow
class person:
    def _init____(self,name,age):
        self.name=name
        self.age=age
    def display(self):
        print("name is ",self.name)
        print('age is',self.age)
class teacher(person):
    def _init_(self,name,age,exp,rarea):
        person._init_(self,name,age)
        self.exp=exp
        self.rarea=rarea
    def displaydata(self):
        person.display(self)
        print('experience is',self.exp)
        print('research area',self.rarea)
class student(person):
    def _init_(self,name,age,course,marks):
        person._init_(self,name,age)
        self.course=course
        self.marks=marks
    def displaydata(self):
        person.display(self)
        print('courses=',self.course)
        print('marks=',self.marks)
print('------teacher class-------')
T=teacher('marks',43,20,'JSS')
T.displaydata()
print('-------student class--------')
S=student('vivek',20,'B.tech',78)
S.displaydata()

#program to invoke init in multiple inheritance
class base1(object):
    def init(self):
        print("base class1")
class base2(object):
    def init(self):
        print("base class 1")
class Derived(base1,base2):
    pass
D=Derived()
print(D)

# program to call constructor of a base class from superclass
class base1(object):
    def _init_(self):
        print("base class 1")
        super(base1,self)._init_()
class base2(object):
    def _init_(self):
        print("base class 2")
class Derived(base1,base2):
    def _init_(self):
        super(Derived,self)._init_()
        print("Derived class")
D=Derived()

class person:
    def name(self):
        print('name is...')
class teacher(person):
    def qual(self):
        print('qualification is phd')
class hod(teacher): #class derived from teacher   person->teacher ->hod
    def expe(self):
        print('experience is 22 yrs')
HOD=hod()
HOD.name()
HOD.qual()
HOD.expe()

#multi path inheritance
class student:
  def name(self):
   print("name;;;")
class academic(student):
  def acad_score(self):
    print("academic score 90% above")
class EEE(student):
  def EEE_score(self):
    print("EEE score---->60% and above")
class result(academic,EEE):
  def eligibility(self):
    print("__________eligibility to apply------------")
    self.acad_score()
    self.EEE_score()
R=result()
R.eligibility()

a=int(input())
b=int(input())
c=int(input())
if(a>b & a>c):
  print("a is greater")
elif(b>a & b>c):
  print("b is greater")
else:
  print("c is greAter")

n=input()
z=n.split()
a=int(z[0])
b=int(z[1])
c=int(z[2])
if(a>b & a>c):
  print(a," is greater")
elif(b>a & b>c):
  print(b," is greater")
else:
  print(c," is greAter")

a=10
b=12
print(a&b)
print(a and b)

rows=int(input("Enter no. of rows:"))
for i in range(rows):
  for j in range(i+1):
    print('$',end=" ")
  print("")

rows=int(input("Enter no. of rows:"))
for i in range(rows):
  for j in range(i+1):
    print(j+1,end=" ")
  print("")

#factorial of a number
n=int(input())
temp=1
for i in range(1,n+1):
  temp*=i
print(temp)

#fibonacci series 
def fibb(n):
  if(n<2):
    return 1
  return(fibb(n-1)+fibb(n-2))
n=int(input("enter the range"))
for i in range(n):
 print("Fibonacci(",i,")=",fibb(i))

#remove an empty tuples
tuples=[(),(90,91,2,3,4),(2,3,4,5)]
x=[]
flag=0
for i in tuples:
  for j in i:
      flag=1
      break
  if(flag==1):
      x.append(i)
print(x)

#check prime or not
num = 29
flag = False

if num == 1:
    print(num, "is not a prime number")
elif num > 1:
    for i in range(2, num):
        if (num % i) == 0:
            flag = True
            break
    if flag:
        print(num, "is not a prime number")
    else:
        print(num, "is a prime number")

#average of numbers in list
list=[2,4,5,6,7,8,89,9]
m=0
for i in list:
 m+=i
 n=len(list)
print(m/n)

def permutation(lst):
    if len(lst) == 0:
        return []
    if len(lst) == 1:
        return [lst]
 
    l = [] 
    for i in range(len(lst)):
       m = lst[i]
       remLst = lst[:i] + lst[i+1:]
       for p in permutation(remLst):
           l.append([m] + p)
    return l
data = list('123')
for p in permutation(data):
    print (p)

#multiply
list=[2,4,5,6]
j=1
for i in list:
 j*=i
print(j)

#remove 0,4,5 elements
list=['Red','Green','White','Black','Pink','Yellow']
list.remove(list[5])
list.remove(list[4])
list.remove(list[0])
print(list)

str="hello"
print(str.split())

a=int(input())
key=0
value=0
d={}
for i in range(a):
    key=input("enter the username ")
    value=input("enter the password ")
    d[key]=value
b=input("username")
c=input("password")
e=0
for key in d:
    if key==b:
        e=1
        print("user is found")
        if d[key]==c:
            print("your pass word is correct")
        else:
            print("your password is incorrect")
if e!=1:
    print("user  not fo3und")



"""9.count repeated characters in string
10.reverse a string if its length ios multiple of 4
11.to seperate even,odd and zeroes from a list
12.split a given dictionary of lists into list of dictionaries
"""